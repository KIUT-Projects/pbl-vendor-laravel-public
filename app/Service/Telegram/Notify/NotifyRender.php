<?php

namespace App\Service\Telegram\Notify;

use App\Http\Controllers\Controller;
use Carbon\Carbon;
//use App\Models\Action;

//use App\Http\Controllers\Service\Telegram\BotCommands;
//use App\Http\Controllers\Service\Telegram\BotFunctions;

//use App\Models\Product;
//use App\Models\Order;
//use App\Models\OrderDetail;

//use App\Models\User;
//use App\Models\Shop;
//use App\Models\Invitation;
//use App\Models\UserBlacklist;

class NotifyRender extends Controller
{

    public $functions;
    public string $lang = 'ru';

    public function makeImage($image = NULL){
        $make = json_encode(['inline_keyboard' => $image]);
        return array(
            //'one_time_keyboard' => false,
            'reply_markup' => $make
        );
    }

    public function notifyOrderToAdmin($id){
        $order = Order::where('id', $id)->first();
        $information = json_decode($order->shipping_address);

        $details = OrderDetail::where('order_id', $id)->get();
        $credit_message = '';
        if(!empty($details->credit_status)){
            $credit_info = json_decode($details->credit_status);
            $credit_message = 'üî¥ –†–ê–°–°–†–û–ß–ö–ê ['.$credit_info->credit_type.']üî¥';
        }
        $proccess = ''; //count($details);
        foreach($details as $key => $detail){
            $product = Product::where('id', $detail->product_id)->first();
            $math_id = $key + 1;
            $math_price = $detail->price * $detail->quantity;
            $proccess .= $math_id.'. '.$product->name.' <b>x'.$detail->quantity.' —à—Ç.</b>
'.number_format($detail->price).' <b>x'.$detail->quantity.' = '.number_format($math_price).' —Å—É–º</b>
';
        }

        if($order->userid){ $client = 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>#'.$order->user_id.'</b>'; }
        else{ $client = '–ì–æ—Å—Ç—å ID: <b>#'.$order->guest_id.'</b>'; }

        if($order->payment_type == 'cash_on_delivery'){ $order->payment_type = '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ';
        }else{ $order->payment_type = '–¢–µ—Ä–º–∏–Ω–∞–ª'; }

        if($order->payment_status == 'paid'){ $order->payment_status = '–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π';
        }else{ $order->payment_status = '–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π'; }


$text = '–ö–æ–¥ –∑–∞–∫–∞–∑–∞ <b>#'.$order->id.'</b>'.$credit_message.'

'.$client.'
–ò–º—è: <b>'.$information->name.'</b>
–ì–æ—Ä–æ–¥: <b>'.$information->city.'</b>
–ê–¥—Ä–µ—Å: <b>'.$information->address.'</b>
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '.$information->phone.'

'.$proccess.'
–¢–∏–ø –æ–ø–ª–∞—Ç—ã: <b>'.$order->payment_type.'</b>
–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: <b>'.$order->payment_status.'</b>
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>'.number_format($order->grand_total).' —Å—É–º</b>
–°–æ–∑–¥–∞–Ω–æ –≤: <b>'.$order->created_at->format('d.m.Y H:i').'</b>';

return $text;

    }

    public function notifyOrderToSellers($id, $seller_id){
        $order = Order::where('id', $id)->first();
        $information = json_decode($order->shipping_address);

        $details = OrderDetail::where('order_id', $id)->where('seller_id', $seller_id)->get();
        $credit_message = '';
        if(!empty($details->credit_status)){
            $credit_info = json_decode($details->credit_status);
            $credit_message = 'üî¥ –†–ê–°–°–†–û–ß–ö–ê ['.$credit_info->credit_type.']üî¥';
        }
        $shop_name = Shop::where('user_id', $seller_id)->first()->name;
        $proccess = ''; //count($details);
        foreach($details as $key => $detail){
            $product = Product::where('id', $detail->product_id)->first();
            $math_id = $key + 1;
            $math_price = $detail->price * $detail->quantity;
            $proccess .= $math_id.'. '.$product->name.' <b>x'.$detail->quantity.' —à—Ç.</b>
'.number_format($detail->price).' <b>x'.$detail->quantity.' = '.number_format($math_price).' —Å—É–º</b>
';
        }

        if($order->userid){ $client = 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>#'.$order->user_id.'</b>'; }
        else{ $client = '–ì–æ—Å—Ç—å ID: <b>#'.$order->guest_id.'</b>'; }

        if($order->payment_type == 'cash_on_delivery'){ $order->payment_type = '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ';
        }else{ $order->payment_type = '–¢–µ—Ä–º–∏–Ω–∞–ª'; }

        if($order->payment_status == 'paid'){ $order->payment_status = '–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π';
        }else{ $order->payment_status = '–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π'; }


$text = '
–ö–æ–¥ –∑–∞–∫–∞–∑–∞ <b>#'.$order->id.'</b>'.$credit_message.'

–ü—Ä–æ–¥–∞–≤–µ—Ü: <b>'.$shop_name.'</b>

–ò–º—è: <b>'.$information->name.'</b>
–ì–æ—Ä–æ–¥: <b>'.$information->city.'</b>
–ê–¥—Ä–µ—Å: <b>'.$information->address.'</b>
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '.$information->phone.'

'.$proccess.'
–¢–∏–ø –æ–ø–ª–∞—Ç—ã: <b>'.$order->payment_type.'</b>
–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: <b>'.$order->payment_status.'</b>
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>'.number_format($order->grand_total).' —Å—É–º</b>
–°–æ–∑–¥–∞–Ω–æ –≤: <b>'.$order->created_at->format('d.m.Y H:i').'</b>';

return $text;

    }

    public function successAddedSeller($user_id, $seller_id){
        $shop = Shop::where('user_id', $seller_id)->first();

$text = 'üéâ*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*

–í–∞—à Telegram ID: '.$user_id.'
–í–∞—à –º–∞–≥–∞–∑–∏–Ω: '.$shop->name.'

–ù–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑—ã –æ—Ç OPENSHOP.UZ.

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –Ω–µ–¥–æ—á–µ—Ç—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å support@openshop.uz.';

return $text;

    }

    public function notifyInvitationToAdmin($id){
        $invitation = Invitation::findOrFail($id);

$text = '*üè¢–ú—ã —Ö–æ—Ç–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞–º–∏!*

ID –∑–∞—è–≤–∫–∞: *#'.$invitation->id.'*

–ò–º—è –∑–∞—è–≤–∏—Ç–µ–ª—è: *'.$invitation->name.'*
–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: *'.$invitation->company.'*
–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏: *'.$invitation->address.'*

–≠–ª. –ø–æ—á—Ç–∞: *'.$invitation->email.'*
–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: '.$invitation->phone.'

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ: *'.$invitation->information.'*

–î–æ–∫—É–º–µ–Ω—Ç—ã: [–ü–æ–∫–∞–∑–∞—Ç—å]('.route('invitation.show', encrypt($invitation->id)).')

–°–æ–∑–¥–∞–Ω–æ –≤: *'.$invitation->created_at->format('d.m.Y H:i').'*
#partner #invitation';

return $text;

    }

    public function notifyErrorPageRender($exp){

if(in_array($exp['type'], ['404', '500', '501'])){

    if($exp['user_id'] != NULL){
        $user = User::where('id', $exp['user_id'])->first();
        if($user->user_type == 'admin')
            $user_meta = 'üë®‚ÄçüíªAdmin: '.$user->name.' ('.$user->user_type.') #: '. $exp['user_id'];
        elseif($user->user_type == 'staff')
            $user_meta = 'üëÆüèª‚Äç‚ôÇÔ∏èAdmin: '.$user->name.' ('.$user->user_type.') #: '. $exp['user_id'];
        elseif($user->user_type == 'seller')
            $user_meta = 'üë®‚ÄçüåæSeller: '.$user->name.' ('.$user->user_type.') #: '. $exp['user_id'];
        else
            $user_meta = 'üßü‚Äç‚ôÇÔ∏èUser: '.$user->name.' ('.$user->user_type.') #: '. $exp['user_id'];
    }else{
        if(stripos($exp['agent'], "Telegram"))
            $user_meta = 'üîµTelegram Bot';
        elseif(stripos($exp['agent'], "bot"))
            $user_meta = 'ü§ñCrawer Bot';
        else
            $user_meta = 'üßñ‚Äç‚ôÇÔ∏èGuest';
    }
}

if($exp['type'] == '404'){

$text = '‚ö†Ô∏è '.$exp['type'].' ERROR

URL: '.$exp['fullUrl'].'

'.$exp['getMessage'].'

'.$exp['getFile'].'

'.$exp['agent'].'

'.$user_meta.'

IP: '.$exp['ip'];

}elseif($exp['type'] == '500'){

$text = '‚õîÔ∏è '.$exp['type'].' ERROR (by '.$exp['by'].')

'.$exp['getFile'].' <b>'.$exp['getLine'].'-line</b>

URL: '.$exp['fullUrl'].'

'.$exp['getMessage'].'

'.$exp['agent'].'

'.$user_meta.'

IP: <code>'.$exp['ip'].'</code> | '.now()->format('d.m.Y H:i').'';

}elseif($exp['type'] == '400'){

$text = '‚ö†Ô∏è 400 '.$exp['getMessage'].'

URL: '.$exp['fullUrl'].'

'.$exp['agent'].'

IP: '.$exp['ip'];

}elseif($exp['type'] == '401'){

$text = '‚ö†Ô∏è 401 '.$exp['getMessage'].'

URL: '.$exp['fullUrl'].'

'.$exp['agent'].'

IP: '.$exp['ip'].' | Time: '.now();

}

    return $text;

    }

    public function notifyOffer($data){

$text = 'üî•üî¥*–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ*üî¥üî•

üë§–ò–º—è: '.$data['name'].'

üìû–ö–æ–Ω—Ç–∞–∫—Ç: '.$data['contact'].'

üì©–°–æ–æ–±—â–µ–Ω–∏–µ: '.$data['message'].'

üïî–í—Ä–µ–º—è: '.$data['time'].'

üåêIP: '.$data['ip'].'

üî•#openshop #offerüî•';


    return $text;

    }

    public function setUserChatID($id, $profile){
        $user = User::findOrFail($id);

        if(isset($profile->username))
            $username = $profile->username != NULL ? 'Username: @'.$profile->username : NULL;

        //$test = 1 != 0 ? 'first' : 'second';

$text = 'User ID: <b>#'.$user->id.'</b>
Name: '.$user->name.'
Email: '.$user->email.'

Telegram ID: '.$profile->id.'
Name: '.$profile->name.'
'.$userinfo.'
';

return $text;

    }

    public function connectMe($user){
        $text = 'ID: `'.$user->id.'`

Name: '.$user->first_name.'
Username: @'.$user->username.'

#connect';
        return $text;
    }

    public function blackList(){
        $lists = UserBlacklist::all();
        $proccess = '';
        $i = 0;
        foreach($lists as $list){
            $i++;
            $proccess .= $list->ip.'
            '.$list->agent.'
';
        }

        $text = 'Hello World

'.$proccess.'

'.now().'

#blacklist';
        return $text;
    }

    public function whiteList($duration = '24h'){
        $link = 'https://openshop.uz/addwhitelist';
        $token = encrypt(today()->timestamp.'_'.$duration);

        $text = '<b>Add to Whitelist</b>

Generated: <b>'.now().'</b>

Expire: <b>'.$duration.'</b>

Access to: <b>Admin Panel</b>

Link: <a href="'.$link.'?token='.$token.'">CLICK HERE</a>

#whitelist';
        return $text;
    }

    public function trendyol($duration = 'dialy'){
        $list = '';
        foreach(Product::where('deleted', 0)->where('from_country', 'TR')->whereDate('created_at', '=', now()->toDateString())->select('user_id')->get()->groupBy('user_id')->map->count()->sort()->reverse() as $user_id => $added_count){
            $list .= User::where('id', $user_id)->first()->name." - <b>".$added_count."</b>\n";
        }

        $text = '<b>Dialy</b> '.today()->format('d.m.Y').'

'.$list.'
#trendyol';
        return $text;
    }

    public function product($duration = 'dialy'){
        $list = '';
        foreach(Product::where('deleted', 0)->whereDate('created_at', '=', now()->toDateString())->select('user_id')->get()->groupBy('user_id')->map->count()->sort()->reverse() as $user_id => $added_count){
            $list .= User::where('id', $user_id)->first()->name." - <b>".$added_count."</b>\n";
        }

        $text = '<b>Dialy</b> '.today()->format('d.m.Y').'

'.$list.'
#trendyol';
        return $text;
    }

    public function dailyProducts(){
        $created = Product::where('deleted', 0)->whereDate('created_at', today())->select('user_id')->get()->groupBy('user_id')->map->count()->sort()->reverse();
        $edited = Action::where('action_type', 'product')->where('action', 'edit')->where('user_id', '!=', 0)->whereDate('created_at', today())->get()->groupBy('user_id')->map->count()->sort()->reverse();
        $moderated = Action::where('action_type', 'product_moderation')->where('user_id', '!=', 0)->whereDate('created_at', today())->get()->groupBy('user_id')->map->count()->sort()->reverse();

        $text = "<b>–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n";
        $created_counter = 0;

        if(isset($created)){
            foreach($created as $user_id => $added_count){
                $text .= User::where('id', $user_id)->first()->name." - ".$added_count."\n";
                $created_counter = $created_counter+(int)$added_count;
            }
        }else{
            $text .= "‚ùå–°–µ–≥–æ–¥–Ω—è —Ç–æ–≤–∞—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω\n";
        }

        $text .= "\n<b>–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n";
        $edited_counter = 0;

        if(isset($edited)){
            foreach($edited as $user_id => $edited_count){
                $text .= User::where('id', $user_id)->first()->name." - ".$edited_count."\n";
                $edited_counter = $edited_counter+$edited_count;
            }
        }else{
            $text .= "‚ùå–°–µ–≥–æ–¥–Ω—è —Ç–æ–≤–∞—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª";
        }

        $text .= "\n<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n";
        $moderated_counter = 0;
        if(isset($moderated)){
            foreach($moderated as $user_id => $moderated_count){
                $text .= User::where('id', $user_id)->first()->name." - ".$moderated_count."\n";
                $moderated_counter = $moderated_counter+$moderated_count;
            }
        }else{
            $text .= "‚ùå–°–µ–≥–æ–¥–Ω—è —Ç–æ–≤–∞—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª";
        }

        $text .= "\n\n–û–±—â–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ: ".$created_counter."";
        $text .= "\n–û–±—â–µ–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ: ".$edited_counter."";
        $text .= "\n–û–±—â–µ–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ: ".$moderated_counter."\n";
        $text .= "\n#user #dialy";

        $text .= "\n<b>".now()->format('d.m.Y H:i')."</b>";

        return $text;
    }


}
